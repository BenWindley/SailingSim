#define INV2PI	0.15915494309f
#define INVPI2	0.63661977236f
#define HPI		1.57079632679f
#define PI		3.14159265358f
#define PI2		6.28318530717f
#define HSQRT2	0.70710678118f

#pragma kernel SpectrumInit
#pragma kernel SpectrumUpdate

int domainSize;
float depth;
float gravity;
float windSpeed;

uint WangHash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

uint rngState;

uint Rand() // XOR-shift
{
    rngState ^= (rngState << 13);
    rngState ^= (rngState >> 17);
    rngState ^= (rngState << 5);
    return rngState;
}

float RandFloat()
{
    return float(Rand()) / 4294967296.0f;
}

float RandGauss()
{
    float u1 = RandFloat();
    float u2 = RandFloat();
    if (u1 < 1e-6f) u1 = 1e-6f;
    return sqrt(-2.0f * log(u1)) * cos(PI2 * u2);
}

float PhillipsSpectrum(float2 k, float mag)
{
    float L = windSpeed * windSpeed / gravity;

    return 0.01f * pow(dot(normalize(k), float2(1,0)), 2.0f) * exp(-1 / (mag * mag * L * L)) / pow (mag, 4);
}

float DirectionalSpreading(float w, float theta, float mag, float dTheta)
{
    if (theta > -HPI && theta < HPI)
    {
        float ct = cos(theta);
        return INVPI2 * (ct * ct);
    }
    else
    {
        return 0.0f;
    }
}

RWTexture2D<float4> outputH0;

[numthreads(8, 8, 1)]
void SpectrumInit(uint2 id : SV_DispatchThreadID)
{
    int2 coord = id - domainSize.xx / 2.0f;

    if (coord.x == 0 && coord.y == 0)
    {
        outputH0[id] = float4(0, 0, 0, 0);
        return;
    }

	// Find wave vector and number
    float2 k = PI2 * coord / domainSize;
    float mag = length(k);

	// Init seed
    rngState = WangHash(id.y * domainSize + id.x);

	// PhillipsSpectrum
    float ps = PhillipsSpectrum(k, mag);

    float deltaSPos = ps;
    float deltaSNeg = ps;

	// Dispersion
    float w = sqrt(abs(gravity * mag));
    float dwdk = gravity / (2.0f * w);

	// Directional spreading
    float dK = PI2 / domainSize;
    float thetaPos = atan2(-k.y, k.x);
    float thetaNeg = atan2(k.y, -k.x);
    float dTheta = abs(atan2(dK, mag));

    deltaSPos *= DirectionalSpreading(w, thetaPos, mag, dTheta);
    deltaSNeg *= DirectionalSpreading(w, thetaNeg, mag, dTheta);
    deltaSPos *= (dK * dK) * dwdk / mag;
    deltaSNeg *= (dK * dK) * dwdk / mag;

	// Amplitude
    float ampPos = RandGauss() * sqrt(abs(deltaSPos) * 2.0f);
    float ampNeg = RandGauss() * sqrt(abs(deltaSNeg) * 2.0f);

	// Output
    float phasePos = RandFloat() * PI2;
    float phaseNeg = RandFloat() * PI2;
    outputH0[id] = float4(
		ampPos * float2(cos(phasePos), -sin(phasePos)),
		ampNeg * float2(cos(phaseNeg), -sin(phaseNeg))
	);
}

float time;

Texture2D<float4> inputH0;
RWTexture2D<float2> outputDy;
RWTexture2D<float2> outputDx;
RWTexture2D<float2> outputDz;

float2 cmul(float2 a, float2 b)
{
    return float2(
		a.x * b.x - a.y * b.y,
		a.x * b.y + a.y * b.x
	);
}

[numthreads(8, 8, 1)]
void SpectrumUpdate(uint2 id : SV_DispatchThreadID)
{
    int2 coord = id - domainSize.xx / 2.0f;

    float2 k = PI2 * coord / domainSize;
    float mag = length(k);

    // Dispersion
    float w = sqrt(abs(gravity * mag));

    float sw = sin(w * time);
    float cw = cos(w * time);

    float2 lhs = float2(cw, -sw);
    float2 rhs = float2(cw, sw);

    float4 h0 = inputH0[id];
    // Euler Formula
    float2 h = cmul(h0.xy, lhs) + cmul(h0.zw, rhs);

    outputDy[id] = h;
    outputDx[id] = float2(-h.y * k.x, h.x * k.x) / (mag + 0.00001f);
    outputDz[id] = float2(-h.y * k.y, h.x * k.y) / (mag + 0.00001f);
}